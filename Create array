1.数组的创建：根据现有条件创建ndarray 
  a.通过array()函数进行创建：a = np.array([1,2,3,4]) b = np.array((1,2,3,4)) 
  创建二维数组
  c = np.array([[11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25],
              [26, 27, 28, 29, 30],
              [31, 32, 33, 34, 35]])  
   # 创建三维数组
   d = np.array([[(1.5, 2, 3), (4, 5, 6)],
              [(3, 2, 1), (4, 5, 6)]])
  
   b.通过asarray()函数进项创建
    array()和asarray()都可以将结构数据转换为ndarray 但是两者的区别就是当数据源是nparray时array
    仍然会copy出一个副本，占用一个新的内存，但不改变dtype时 asarray()不会
    x = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
    y = np.array(x)
    z = np.asarray(x)
    x[1][2] = 2
    print(x,type(x))
    # [[1, 1, 1], [1, 1, 2], [1, 1, 1]] <class 'list'>
    print(y,type(y))
    # [[1 1 1]
    #  [1 1 1]
    #  [1 1 1]] <class 'numpy.ndarray'>
    print(z,type(z))
    # [[1 1 1]
    #  [1 1 1]
    #  [1 1 1]] <class 'numpy.ndarray'>
    
2.依据ones和zeros填充方式
  在机器学习任务中经常昨的一件事就是初始化参数，需要用常数值或者随机值来创建一个固定大小的矩阵。
  a.zeros()函数：返回给定形状和类型的0数组 zeros_like()函数：返回给定数组和类型相同的0数组
  例子： a = np.zeros(5) x= np.zeros([2,3]) 
  z = np.array([[0,2,3],[1,2,3]])
  y = np.zero_like(z)  
  
  b.1数组：ones()函数：返回给定形状和类型的1数组，ones_like()函数：返回给定数组和相同类型的1数组
  x = np.ones(5) print(x)  # [1. 1. 1. 1. 1.]
  x = np.ones([2, 3])   print(x)
  # [[1. 1. 1.]
  #  [1. 1. 1.]]

  x = np.array([[1, 2, 3], [4, 5, 6]])
  y = np.ones_like(x)
  print(y)
  
  c.空数组：empty()函数：返回一个空数组，数组元素为随机数 empty_like()函数：返回一个与给定数组具有相同
  形状和类型的新数组
    x = np.empty(5)
    print(x)
    # [1.95821574e-306 1.60219035e-306 1.37961506e-306 
    #  9.34609790e-307 1.24610383e-306]
    x = np.empty((3, 2))
    print(x)
    # [[1.60220393e-306 9.34587382e-307]
    #  [8.45599367e-307 7.56598449e-307]
    #  [1.33509389e-306 3.59412896e-317]]
    x = np.array([[1, 2, 3], [4, 5, 6]])
    y = np.empty_like(x)
    print(y)
    # [[  7209029   6422625   6619244]
    #  [      100 707539280       504]]
    
  d.单位数组eye()函数：返回一个对角线上为1，其它地方为零的单位数组,identity()函数：返回一个方的单位数组。
  e.对角数组 diag()函数：提取对角线或构造对角数组。
  x = np.arange(9).reshape((3, 3))
  print(x)
  # [[0 1 2]
  #  [3 4 5]
  #  [6 7 8]]
  print(np.diag(x))  # [0 4 8]
  print(np.diag(x, k=1))  # [1 5]
  print(np.diag(x, k=-1))  # [3 7]
  v = [1, 3, 5, 7]
  x = np.diag(v)
  print(x)
  # [[1 0 0 0]
  #  [0 3 0 0]
  #  [0 0 5 0]
  #  [0 0 0 7]]
f.常数数组 full()函数：返回一个常数数组.full_like()函数：返回与给定数组具有相同形状和类型的常数数组。
  x = np.full((2,), 7) print(x)   # [7 7]
  x = np.full(2, 7) print(x)   # [7 7]
  x = np.full((2, 7), 7)  print(x)
  # [[7 7 7 7 7 7 7]
  #  [7 7 7 7 7 7 7]]
  
  x = np.array([[1, 2, 3], [4, 5, 6]])
  y = np.full_like(x, 7)
  print(y)
  # [[7 7 7]
  #  [7 7 7]]
  
3.利用数值范围创建ndarray
arange()函数：返回给定间隔内的均匀间隔的值。
linspace()函数：返回指定间隔内的等间隔数字。
logspace()函数：返回数以对数刻度均匀分布。
numpy.random.rand() 返回一个由[0,1)内的随机数组成的数组。





  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  
  
  
  
